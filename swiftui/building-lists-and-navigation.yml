- 内容: Copy the contents of the body property from ContentView into LandmarkDetail.
  提示: ''
  翻译: 将 ContentView 中 body 属性的内容复制到 LandmarkDetail。
- 内容: Create a new Swift file in your project and name it ModelData.swift.
  提示: ''
  翻译: 在项目中创建一个新的 Swift 文件，命名为 ModelData.swift。
- 内容: The Landmark data already has the id property required by Identifiable protocol;
    you only need to add a property to decode it when reading the data.
  提示: ''
  翻译: Landmark 数据已经具有 Identifiable 协议所需的 id 属性；你只需在读取数据时添加一个属性来对它进行解码。
- 内容: Compute a locationCoordinate property that’s useful for interacting with the
    MapKit framework.
  提示: ''
  翻译: 计算一个与 MapKit 框架交互时有用的 locationCoordinate 属性。
- 内容: In the LandmarkDetail file, pass the required data to your custom types.
  提示: ''
  翻译: 在 LandmarkDetail 文件中，将需要的数据设置到你的自定义的视图上。
- 内容: To fix the preview, you’ll need to modify the preview provider.
  提示: ''
  翻译: 要修复预览，你需要修改预览数据提供类。
- 内容: Xcode’s canvas automatically recognizes and displays any type in the current
    editor that conforms to the PreviewProvider protocol. A preview provider returns
    one or more views, with options to configure the size and device.
  提示: ''
  翻译: Xcode 的画布会自动识别并显示当前编辑器中遵循 PreviewProvider 协议的任何类型。预览提供类返回一个或多个视图，并且可以选择尺寸和预览设备。
- 内容: Use the previewDisplayName(_:) modifier to add the device names as labels for
    the previews.
  提示: ''
  翻译: 使用 previewDisplayName(:) 修饰符设置设备名称。
- 内容: Add a method that updates the region based on a coordinate value.
  提示: ''
  翻译: 添加一个根据坐标值更新区域的方法。
- 内容: Switch back to LandmarkList.swift and remove the id parameter.
  提示: ''
  翻译: 切换回 LandmarkList.swift 并删除 id 参数。
- 内容: Embed the dynamically generated list of landmarks in a NavigationView.
  提示: ''
  翻译: 将动态生成的地标列表嵌入 NavigationView。
- 内容: Step 6
  提示: ''
  翻译: 步骤 6
- 内容: Download the project files to begin building this project, and follow the steps
    below.
  提示: ''
  翻译: 下载项目文件来开始构建此项目，并按照以下步骤操作。
- 内容: Modify the text view to use the landmark property’s name.
  提示: ''
  翻译: 修改文本视图为地标属性的名称。
- 内容: In the previews static property of LandmarkRow_Previews, add the landmark parameter
    to the LandmarkRow initializer, specifying the first element of the landmarks
    array.
  提示: ''
  翻译: 在 LandmarkRow_Previews 的静态属性中，向 LandmarkRow 传入地标数组的第一个元素进行初始化。
- 内容: In the next few steps, you’ll add navigation among your list and detail views.
  提示: ''
  翻译: 接下来几步，你将在列表和详细视图之间添加导航。
- 内容: Step 8
  提示: ''
  翻译: 步骤 8
- 内容: You can experiment with different devices to compare the renderings of your
    views, all from the canvas.
  提示: ''
  翻译: 你可以尝试使用不同设备比较视图的呈现效果，这些都可以在画布上展示。
- 内容: Starting with the child views, you’ll convert CircleImage, MapView, and then
    LandmarkDetail to display data that’s passed in, rather than hard-coding each
    row.
  提示: ''
  翻译: 从子视图开始，你将让 CircleImage、MapView 和 LandmarkDetail 显示传入的数据，而不是对每行进行硬编码。
- 内容: You make the property private because users of the Landmarks structure care
    only about the image itself.
  提示: ''
  翻译: 你将属性设置为私有，因为 Landmarks 结构的使用方只关心图像本身，不需要知道图片名称。
- 内容: UITableView
  提示: ''
  翻译: UITableView
- 内容: Call the navigationTitle(_:) modifier method to set the title of the navigation
    bar when displaying the list.
  提示: ''
  翻译: 在显示列表时调用 navigationTitle(_:) 修饰符方法设置导航栏的标题。
- 内容: Create a new SwiftUI view in the Views group named LandmarkRow.swift.
  提示: ''
  翻译: 在 Views 文件夹中创建一个名为 LandmarkRow.swift 的新 SwiftUI 视图。
- 内容: You can provide the name of any device as it appears in Xcode’s scheme menu.
  提示: ''
  翻译: 你可以设置 Xcode 方案菜单中显示的任何设备的名称。
- 内容: Finally, call the navigationTitle(_:) modifier to give the navigation bar a
    title when showing the detail view, and the navigationBarTitleDisplayMode(_:)
    modifier to make the title appear inline.
  提示: ''
  翻译: 最后，调用 navigationTitle(:) 修饰符为显示详细视图时的导航栏设置标题，并使用 navigationBarTitleDisplayMode(:)
    修饰符使标题显示成行内的样式。
- 内容: When you add the landmark property, the preview stops working, because the LandmarkRow
    type needs a landmark instance during initialization.
  提示: ''
  翻译: 当你添加 landmark 属性时，预览会停止工作，因为 LandmarkRow 类型在初始化过程中需要一个地标实例。
- 内容: Complete the dynamically-generated list by returning a LandmarkRow from the
    closure.
  提示: ''
  翻译: 通过从闭包返回 LandmarkRow 完成动态生成的列表。
- 内容: In LandmarkRow_Previews, update the landmark parameter to be the second element
    in the landmarks array.
  提示: ''
  翻译: 在 LandmarkRow_Previews 中，将地标参数设置为地标数组中的第二个元素。
- 内容: The preview shows the two landmarks rendered in a list style that’s appropriate
    for iOS.
  提示: ''
  翻译: 预览显示了适用于 iOS 平台的列表样式，上面呈现了我们传入的两个地标。
- 内容: The first view you’ll build in this tutorial is a row for displaying details
    about each landmark. This row view stores information in a property for the landmark
    it displays, so that one view can display any landmark. Later, you’ll combine
    multiple rows into a list of landmarks.
  提示: ''
  翻译: 在本教程中，你将构建的第一个视图是一个用于显示每个地标详细信息的行。这个行视图将它需要显示的地标的信息存储在一个属性中，这样通过传入不同的地标数据，一个视图就可以显示任何地标。稍后，你将把多个行视图组合成一个地标列表。
- 内容: When you use SwiftUI’s List type, you can display a platform-specific list of
    views. The elements of the list can be static, like the child views of the stacks
    you’ve created so far, or dynamically generated. You can even mix static and dynamically
    generated views.
  提示: ''
  翻译: 当你使用 SwiftUI 的 List 类型时，可以显示一个特定平台上的视图列表。列表中的元素可以是静态的，就像你迄今为止创建的堆栈的子视图一样，也可以是动态生成的。你甚至可以将静态和动态生成的视图混合在一起展示。
- 内容: Section 1
  提示: ''
  翻译: 第 1 节
- 内容: The navigation changes only have an effect when the view is part of a navigation
    stack.
  提示: ''
  翻译: 导航更改仅在视图是导航堆栈的一部分时才会生效。
- 内容: Building Lists and Navigation
  提示: ''
  翻译: ''
- 内容: In addition to List, which of these types presents a dynamic list of views from
    a collection?
  提示: ''
  翻译: 除了 List 之外，以下哪种类型可以从集合中呈现动态视图列表？
- 内容: Choose File > New > File to create a new Swift file in your project, and name
    it Landmark.swift.
  提示: ''
  翻译: 在项目中创建一个新的Swift文件，命名为 Landmark.swift。
- 内容: Start by changing the current list preview to render at the size of an iPhone
    SE.
  提示: ''
  翻译: 首先将当前列表预览更改为以 iPhone SE 的大小呈现。
- 内容: Switch to Landmark.swift and declare conformance to the Identifiable protocol.
  提示: ''
  翻译: 切换到 Landmark.swift 并声明遵循 Identifiable 协议。
- 内容: If the preview isn’t visible already, show the canvas by choosing Editor > Canvas,
    and then click Resume.
  提示: ''
  翻译: 如果预览尚未显示，请选择 Editor > Canvas 显示画布，然后点击 Resume。
- 内容: Inside the list’s closure, wrap the returned row in a NavigationLink, specifying
    the LandmarkDetail view as the destination.
  提示: ''
  翻译: 在列表的闭包内部，将 LandmarkRow 包装在 NavigationLink 中，将 LandmarkDetail 视图指定为导航跳转的目标。
- 内容: Create an array of landmarks that you initialize from landmarkData.json.
  提示: ''
  翻译: 创建一个由 landmarkData.json 初始化的地标数组。
- 内容: Check Your Understanding
  提示: ''
  翻译: ''
- 内容: To simplify the code, move the previewLayout(_:) call to the outside of the
    group’s child declarations.
  提示: ''
  翻译: 为简化代码，将 previewLayout(_:) 调用移到 Group 的子声明之外。
- 内容: You can create groups of existing items by selecting the items to add to the
    group, and then choosing File > New > Group from Selection in the Xcode menu.
  提示: ''
  翻译: 你可以先选中多个项目，然后在 Xcode 菜单中选择 File > New > Group from Selection，就能将选择的文件整理到一个文件夹中。
- 内容: Create the List of Landmarks
  提示: ''
  翻译: 创建地标列表
- 内容: Create a new SwiftUI view named LandmarkDetail.swift.
  提示: ''
  翻译: 创建一个名为 LandmarkDetail.swift 的新 SwiftUI 视图。
- 内容: ForEach operates on collections the same way as the list, which means you can
    use it anywhere you can use a child view, such as in stacks, lists, groups, and
    more. When the elements of your data are simple value types — like the strings
    you’re using here — you can use \.self as key path to the identifier.
  提示: ''
  翻译: ForEach 与列表一样操作数组，这意味着你可以在任何可以使用子视图的地方使用它，例如堆栈、列表、组等。当你的数据元素是简单的值类型（例如这里使用的字符串）时，可以使用
    .self 作为标识符的路径。
- 内容: Create a Landmark Model
  提示: ''
  翻译: 创建地标数据模型
- 内容: In the Landmarks app, a user can flag their favorite places, and filter the
    list to show just their favorites. To create this feature, you’ll start by adding
    a switch to the list so users can focus on just their favorites, and then you’ll
    add a star-shaped button that a user taps to flag a landmark as a favorite.
  提示: ''
  翻译: 在 Landmarks 应用中，用户可以标记他们最喜欢的地方，并过滤列表仅显示他们的收藏夹。要创建此功能，你将首先在列表中添加一个开关，以便用户仅关注他们的收藏夹，然后添加一个星形按钮，用户点击以将地标标记为收藏。
- 内容: Add landmark as a stored property of LandmarkRow.
  提示: ''
  翻译: 添加 landmark 作为 LandmarkRow 的存储属性。
- 内容: Pass Data into Child Views
  提示: ''
  翻译: 将数据传到子视图
- 内容: Step 3
  提示: ''
  翻译: 步骤 3
- 内容: This change also affects the build because the detail view has a map view that
    needs the new parameter. You’ll fix the detail view soon.
  提示: ''
  翻译: 此更改也会影响编译，因为详细视图中的地图视图需要传入一个地图参数。不过别担心，你将很快修复这个问题。
- 内容: Section 2
  提示: ''
  翻译: 第 2 节
- 内容: Before moving on, group related files together to make it easier to manage your
    growing project.
  提示: ''
  翻译: 在继续之前，请将相关文件分文件夹管理，让项目结构更加清晰。
- 内容: You can create a list that displays the elements of a collection by passing
    your collection of data and a closure that provides a view for each element in
    the collection. The list transforms each element in the collection into a child
    view by using the supplied closure.
  提示: ''
  翻译: 你可以通过传递数据集合和提供集合中每个元素的视图的闭包来创建显示集合元素的列表。列表使用提供的闭包将集合中的每个元素转换为子视图。
- 内容: Instead of specifying a list’s elements individually, you can generate rows
    directly from a collection.
  提示: ''
  翻译: 你可以直接从集合生成行，而不是单独指定列表的元素。
- 内容: In LandmarkList.swift, pass the current landmark to the destination LandmarkDetail.
  提示: ''
  翻译: 在 LandmarkList.swift 中，将当前地标传给 LandmarkDetail。
- 内容: You add navigation capabilities to a list by embedding it in a NavigationView,
    and then nesting each row in a NavigationLink to set up a transtition to a destination
    view.
  提示: ''
  翻译: 你可以将列表嵌入 NavigationView 中并将每行嵌套在 NavigationLink 中，来实现到详情视图的导航功能。
- 内容: Step 10
  提示: ''
  翻译: 步骤 10
- 内容: Section 4
  提示: ''
  翻译: 第 4 节
- 内容: 'Lists work with identifiable data. You can make your data identifiable in one
    of two ways: by passing along with your data a key path to a property that uniquely
    identifies each element, or by making your data type conform to the Identifiable
    protocol.'
  提示: ''
  翻译: 列表可以处理可识别的数据。你可以通过以下两种方式之一使你的数据可识别：传递一个能够标识数据唯一的属性的关键路径，或使你的数据类型遵循 Identifiable
    协议。
- 内容: You mark this property as private because you’ll use it only to create a public
    computed property in the next step.
  提示: ''
  翻译: 将此属性标记为私有，因为你只会在下一步中使用它来创建一个公共计算属性。
- 内容: This creates one LandmarkRow for each element in the landmarks array.
  提示: ''
  翻译: 这会为地标数组中的每个元素创建一个 LandmarkRow。
- 内容: Generate Previews Dynamically
  提示: ''
  翻译: 动态生成预览
- 内容: Drag the JPG files from the project files’ Resources folder into your project’s
    asset catalog. Xcode creates a new image set for each image.
  提示: ''
  翻译: 将下载的项目文件中的 Resources 文件夹中的 JPG 文件拖到项目的资源目录中（Assets.xcassets）。Xcode 会为每个图像创建一个新的图像集合。
- 内容: Switch to the live preview to see the detail view show the correct landmarks
    when you navigate from the list.
  提示: ''
  翻译: 切换到实时预览，查看从列表导航时详细视图是否显示正确的地标。
- 内容: With all of the connections established, the preview begins working again.
  提示: ''
  翻译: 在建立完所有连接后，预览重新开始工作。
- 内容: Next, you’ll simplify the List code by adding Identifiable conformance to the
    Landmark type.
  提示: ''
  翻译: 接下来，你将通过向 Landmark 类型添加 Identifiable 协议来简化 List 代码。
- 内容: In LandmarkDetail.swift, add a Landmark property to the LandmarkDetail type.
  提示: ''
  翻译: 在 LandmarkDetail.swift 中，将 Landmark 属性添加到 LandmarkDetail 类型。
- 内容: Step 7
  提示: ''
  翻译: 步骤 7
- 内容: Step 5
  提示: ''
  翻译: 步骤 5
- 内容: Customize the Row Preview
  提示: ''
  翻译: 自定义行预览
- 内容: Adding Codable conformance makes it easier to move data between the structure
    and a data file. You’ll rely on the Decodable component of the Codable protocol
    later in this section to read data from file.
  提示: ''
  翻译: 遵循 Codable 协议可以使结构体和 json 数据文件之间的转换变得简单。稍后，你将会用到 Codable 协议中的Decodable 组件从文件中读取数据。
- 内容: In MapView.swift, add a coordinate property to MapView and update the preview
    provider to pass a fixed coordinate.
  提示: ''
  翻译: 在 MapView.swift 中，向 MapView 添加一个坐标（coordinate）属性，并修改预览提供类传入一个固定坐标。
- 内容: Tip
  提示: ''
  翻译: 提示
- 内容: In the next few steps you’ll model the image associated with each landmark.
  提示: ''
  翻译: 接下来的几个步骤中，你将为每个地标关联一个图像。
- 内容: Use the completed project from the previous tutorial and the resources available
    from this tutorial’s project files to get started.
  提示: ''
  翻译: 为了有更好的学习效果，建议使用上一个教程已经完成的项目以及本节教程项目文件夹中提供的资源。
- 内容: The code you write in a preview provider only changes what Xcode displays in
    the canvas.
  提示: ''
  翻译: 你在预览提供程序中编写的代码只会更改 Xcode 在画布中显示的内容。
- 内容: Change the container from a VStack to a ScrollView so the user can scroll through
    the descriptive content, and delete the Spacer, which you no longer need.
  提示: ''
  翻译: 将容器从 VStack 更改为 ScrollView，以便用户可以滚动查看内容描述，删除你不再需要的 Spacer。
- 内容: Even though you’ve fixed the preview logic, the preview fails to update because
    the build fails. The detail view, which instantiates a circle image, needs an
    input parameter as well.
  提示: ''
  翻译: 尽管你已经修复了预览逻辑，但由于编译失败，预览无法更新。因为详细视图（CircleImage）也需要输入参数。
- 内容: Step 11
  提示: ''
  翻译: 步骤 11
- 内容: Use the previewLayout(_:) modifier to set a size that approximates a row in
    a list.
  提示: ''
  翻译: 使用 previewLayout(_:) 修饰符设置预览窗口的大小。
- 内容: In CircleImage.swift, add a stored image property to CircleImage.
  提示: ''
  翻译: 在 CircleImage.swift 中，向 CircleImage 添加一个名为 image 的存储属性。
- 内容: Replace the default Text view with a List, and provide LandmarkRow instances
    with the first two landmarks as the list’s children.
  提示: ''
  翻译: 用 List 替换默认的 Text 视图，并为列表的子视图提供带有前两个地标的 LandmarkRow 实例。
- 内容: Make the List Dynamic
  提示: ''
  翻译: 让列表根据数据动态变化
- 内容: Embed the existing text view in an HStack.
  提示: ''
  翻译: 将现有文本视图嵌入到 HStack 中。
- 内容: Put ContentView.swift, CircleImage.swift, and MapView.swift into a Views group,
    landmarkData.json in a Resources group, and Landmark.swift and ModelData.swift
    into a Model group.
  提示: ''
  翻译: 将 ContentView.swift、CircleImage.swift 和 MapView.swift 放入一个 Views 分组，将 landmarkData.json
    放入 Resources 分组，将 Landmark.swift 和 ModelData.swift 放入 Model 分组。
- 内容: The list renders properly, but you can’t tap an individual landmark to see that
    landmark’s detail page yet.
  提示: ''
  翻译: 列表渲染正常，但你还不能点击单个地标来查看该地标的详细页面。
- 内容: Section 8
  提示: ''
  翻译: 第 8 节
- 内容: A view’s children inherit the view’s contextual settings, such as preview configurations.
  提示: ''
  翻译: 视图的子视图会继承视图的上下文设置，例如预览大小设置。
- 内容: The LandmarkDetail view still uses hard-coded details to show its landmark.
    Just like LandmarkRow, the LandmarkDetail type and the views it comprises need
    to use a landmark property as the source for their data.
  提示: ''
  翻译: LandmarkDetail 视图仍然使用硬编码的方式来展示地标信息。就像 LandmarkRow 一样，LandmarkDetail 类型及其组成的视图需要使用
    landmark 属性作为数据源。
- 内容: Create a new SwiftUI view in the Views group named LandmarkList.swift.
  提示: ''
  翻译: 在 Views 文件夹中创建一个名为 LandmarkList.swift 的新 SwiftUI 视图。
- 内容: Section 5
  提示: ''
  翻译: 第 5 节
- 内容: Section 6
  提示: ''
  翻译: 第 6 节
- 内容: From now on, you’ll be able to use collections of Landmark elements directly.
  提示: ''
  翻译: 从现在开始，你将能够直接使用地标数组进行初始化。
- 内容: Step 2
  提示: ''
  翻译: 步骤 2
- 内容: Add an onAppear view modifier to the map that triggers a calculation of the
    region based on the current coordinate.
  提示: ''
  翻译: 向地图添加一个 onAppear 视图修饰符，该修饰符会在地图视图显示的时候根据当前坐标计算区域。
- 内容: This is a common pattern when building views using SwiftUI. Your custom views
    will often wrap and encapsulate a series of modifiers for a particular view.
  提示: ''
  翻译: 这是使用 SwiftUI 构建视图时的常见模式。你的自定义视图通常会包装并封装特定视图的一系列修饰符。
- 内容: You can use a Group to return multiple previews from a preview provider.
  提示: ''
  翻译: 你可以使用 Group 从预览提供程序返回多个预览。
- 内容: Within the list preview, embed the LandmarkList in a ForEach instance, using
    an array of device names as the data.
  提示: ''
  翻译: 在列表预览中，将 LandmarkList 嵌入到一个 ForEach 实例中，将设备名称数组作为数据。
- 内容: Drag landmarkData.json in the downloaded files’ Resources folder into your project’s
    navigation pane; in the dialog that appears, select “Copy items if needed” and
    the Landmarks target, and then click Finish.
  提示: 这一步的意思是如果有需要将资源文件拷贝到我们项目目录中。
  翻译: 将下载好的 Resources 文件夹中的 landmarkData.json 拖放到项目的导航栏中；在出现的对话框中，选择“Copy items if
    needed”并且勾选 Landmarks target，然后点击完成。
- 内容: Create a load(_:) method that fetches JSON data with a given name from the app’s
    main bundle.
  提示: ''
  翻译: 创建一个 load(_:) 方法，该方法从应用程序的主包（main bundle）中获取指定名称的 JSON 数据。
- 内容: In the first tutorial, you hard-coded information into all of your custom views.
    Here, you’ll create a model to store data that you can pass into your views.
  提示: ''
  翻译: 在第一个教程中，你将数据写死在所有自定义视图中。在本节，你将创建一个模型来存储可以传递给视图的数据。
- 内容: With the basic landmark detail view set up, you need to provide a way for users
    to see the full list of landmarks, and to view the details about each location.
  提示: ''
  翻译: 在基本地标详细信息视图设置好之后，你需要提供一种途径让用户查看所有地标列表，并查看每个地点的详细信息。
- 内容: You can try out the navigation directly in the preview by switching to live
    mode. Click the Live Preview button and tap a landmark to visit the detail page.
  提示: ''
  翻译: 你可以直接在预览中尝试导航，方法是切换到实时模式。点击实时预览按钮，点击一个地标来访问详细页面。
- 内容: Question 1 of 4
  提示: ''
  翻译: 问题 1/4
- 内容: Define a Landmark structure with a few properties matching names of some of
    the keys in the landmarkData.json data file.
  提示: ''
  翻译: 定义一个 Landmark 结构体，其中包含一些与 landmarkData.json 数据文件中的键名相对应的属性。
- 内容: Next, you’ll manage information about the landmark’s location.
  提示: ''
  翻译: 接下来，你将管理地标位置的信息。
- 内容: You’ll use this sample data throughout the remainder of this tutorial, and for
    all that follow.
  提示: ''
  翻译: 你将在本教程剩余部分和所有后续教程中使用这些示例数据。
- 内容: Next, you’ll add code to the LandmarkList_Previews preview provider to render
    previews of the list view at different device sizes. By default, previews render
    at the size of the device in the active scheme. You can change the preview device
    by calling the previewDevice(_:) modifier method.
  提示: ''
  翻译: 接下来，你将为 LandmarkList_Previews 添加代码，在不同设备大小上呈现列表视图的预览。默认情况下，预览会以活动方案中的设备大小呈现。你可以通过调用
    previewDevice(:) 修饰符方法更改预览设备。
- 内容: Group is a container for grouping view content. Xcode renders the group’s child
    views as separate previews in the canvas.
  提示: ''
  翻译: Group 是对视图内容进行分组的容器。Xcode 在画布中将 Group 的子视图渲染为单独的预览。
- 内容: Remove the two static landmark rows, and instead pass the model data’s landmarks
    array to the List initializer.
  提示: ''
  翻译: 删除两个静态地标行，并将模型数据的地标数组作为参数传递给 List 的初始化函数。
- 内容: Section 7
  提示: ''
  翻译: 第 7 节
- 内容: Add an imageName property to read the name of the image from the data, and a
    computed image property that loads an image from the asset catalog.
  提示: ''
  翻译: 添加一个 imageName 属性，用于对应 json 数据中的图像名称，以及一个计算属性 image，用来从资源目录中加载图像。
- 内容: Wrap the returned row in a Group, and add the first row back again.
  提示: ''
  翻译: 将 LandmarkRow 包裹在 Group 中，并再次设置第一个 landmark 数据进行预览。
- 内容: Change ContentView to instead display LandmarkList.
  提示: ''
  翻译: 更改 ContentView 来显示 LandmarkList。
- 内容: You’ll create views that can show information about any landmark, and dynamically
    generate a scrolling list that a user can tap to see a detail view for a landmark.
    To fine-tune the UI, you’ll use Xcode’s canvas to render multiple previews at
    different device sizes.
  提示: ''
  翻译: 你将创建可以显示任何地标信息的视图，并动态生成一个用户可以点击查看地标详细信息的滚动列表。为了微调 UI，你将使用 Xcode 的画布预览不同设备尺寸下的视图。
- 内容: Step 4
  提示: ''
  翻译: 步骤 4
- 内容: You can customize the returned content from a preview provider to render exactly
    the previews that are most helpful to you.
  提示: ''
  翻译: 你可以自定义预览提供类返回的内容，来呈现对你最有帮助的预览。
- 内容: Group
  提示: ''
  翻译: Group
- 内容: Complete the row by adding an image before the text view, and a spacer after
    it.
  提示: ''
  翻译: 在文本视图之前添加一个图片，在文本视图之后添加一个间隔符，完成这一行的构建。
- 内容: Step 9
  提示: ''
  翻译: 步骤 9
- 内容: The load method relies on the return type’s conformance to the Decodable protocol,
    which is one component of the Codable protocol.
  提示: ''
  翻译: load 方法使用到了 swift 语法中的泛型，返回值遵循 Decodable 协议，它是 Codable 协议的一个组成部分。
- 内容: Create the Row View
  提示: ''
  翻译: 创建行视图
- 内容: Section 3
  提示: ''
  翻译: 第 3 节
- 内容: ForEach
  提示: ''
  翻译: ForEach
- 内容: Step 1
  提示: ''
  翻译: 步骤 1
- 内容: Set Up Navigation Between List and Detail
  提示: ''
  翻译: 在列表和详情页面之间设置导航
- 内容: Finally, you’ll create an array initialized with landmarks from a file.
  提示: ''
  翻译: 最后，你将创建一个用 json 文件中的地标初始化的数组。
- 内容: Prepare a detail view using the content you created in the previous tutorial
    and update the main content view to display the list view instead.
  提示: ''
  翻译: 使用上一个教程中创建的内容来准备搭建详细视图，并更新主内容视图为列表视图。
- 内容: The preview immediately changes to show the second sample landmark instead of
    the first.
  提示: ''
  翻译: 预览会立即刷新显示第二个示例地标。
- 内容: Update the preview provider to pass the image of Turtle Rock.
  提示: ''
  翻译: 更新预览提供类传入 Turtle Rock 的图像数据。
- 内容: Handling User Input
  提示: ''
  翻译: ''
- 内容: With that fixed, you can build the layout for the row.
  提示: ''
  翻译: 修复报错后，你就可以开始构建行的布局。
- 内容: Add a coordinates property to the structure using a nested Coordinates type
    that reflects the storage in the JSON data structure.
  提示: ''
  翻译: 使用嵌套的 Coordinates 类型，对应 json 数据结构中的嵌套类型，这样可以将 coordinates 属性添加到结构中。
- 内容: The preview displays the text, “Hello, World!”.
  提示: ''
  翻译: 预览显示文本：“Hello, World!”。
- 内容: The new images join the one for Turtle Rock that you added in the previous tutorial.
  提示: ''
  翻译: 新图像包含了上一个教程中添加的 Turtle Rock 图像。
