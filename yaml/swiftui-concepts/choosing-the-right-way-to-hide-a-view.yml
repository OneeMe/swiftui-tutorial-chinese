- 内容: To experiment with the code, download the project files and open the sample
    in Xcode.
  提示: ''
  翻译: ''
- 内容: Control whether a view exists, and how that affects the overall layout.
  提示: ''
  翻译: ''
- 内容: The second train uses the opacity(_:) modifier to control the visibility of
    the middle car. When longerTrain is true, the middle car is part of the train,
    and it looks just like the previous conditional example. But when longerTrain
    is false, the middle car still takes up space in this train.
  提示: ''
  翻译: ''
- 内容: Create dynamic alignments that adapt to data and environment changes using stacks.
  提示: ''
  翻译: ''
- 内容: If you need to reserve space in a layout based on the measurement of a view,
    but never want to show that view, you can use the hidden() modifier.
  提示: ''
  翻译: ''
- 内容: To show the differences between these approaches, this example uses a sequence
    of train cars. Each train has three views — a front, middle, and rear section
    — and uses the train car symbols from SF Symbols. For a long train, the front,
    middle, and rear car all appear. For a shorter train, the middle car doesn’t appear.
    The code that defines each train uses a different technique to omit the middle
    car.
  提示: ''
  翻译: ''
- 内容: In these examples, the longerTrain property tracks whether to show or hide the
    middle train car.
  提示: ''
  翻译: ''
- 内容: Use an opacity modifier when you don’t want other content to shift around as
    the view appears or disappears.
  提示: ''
  翻译: ''
- 内容: Choosing the right way to hide a view
  提示: ''
  翻译: ''
- 内容: In a full app, the data determining whether to hide a view might be a Binding,
    or an Environment value.
  提示: ''
  翻译: ''
- 内容: The first train uses if, a conditional clause, to control the middle car. When
    longerTrain is true, the middle car is part of the train. When longerTrain is
    false, the middle car doesn’t exist, and the other cars are closer together.
  提示: ''
  翻译: ''
- 内容: Step 3
  提示: ''
  翻译: ''
- 内容: You can also use an else clause the same way. The contents of the else clause
    only exist when the condition is false.
  提示: ''
  翻译: ''
- 内容: Step 1
  提示: ''
  翻译: ''
- 内容: Organizing and aligning content with stacks
  提示: ''
  翻译: ''
- 内容: Conditionally removing a view
  提示: ''
  翻译: ''
- 内容: VoiceOver and gesture recognizers also ignore a view that you remove in any
    of these ways.
  提示: ''
  翻译: ''
- 内容: Step 2
  提示: ''
  翻译: ''
- 内容: If your design has views that aren’t always relevant, you have a choice about
    how their absence affects the overall layout. You can lay out all the other content
    as if the view doesn’t exist, then update the position of the other content when
    the view becomes visible. Or, you can reserve space for the view regardless of
    whether it’s visible, so that when it becomes visible, none of the other content
    needs to move to accommodate it.
  提示: ''
  翻译: ''
- 内容: Your design might have a login screen that doesn’t show an error message the
    first time it appears, but adds an error message after someone mistypes their
    password. The user name and password fields shouldn’t shift position depending
    on whether the error message is visible. Use an opacity(_:) modifier with a value
    of 0 so that the layout accounts for the error message whether or not it’s visible.
    You can also use this strategy for removing a view that doesn’t affect other views’
    placement, like a view inside an overlay(alignment:content:) modifier.
  提示: ''
  翻译: ''
- 内容: Or, you might have an order Form that displays a second set of address fields
    if a person chooses not to use the same address for their shipping and billing
    addresses. For content like address fields that people might need to scroll past,
    use an if statement to only make room for the content when it’s visible, and shift
    other content as it appears and disappears.
  提示: ''
  翻译: ''
