- 内容: 'About Me'
  提示: ''
  翻译: ''
- 内容: 'Display data from a central source in multiple views.'
  提示: ''
  翻译: ''
- 内容: 'Welcome to the About Me app. In this walkthrough, you’ll learn the basics of using SwiftUI to display information across multiple tab views.'
  提示: ''
  翻译: ''
- 内容: 'Run the preview and tap to select the Home, Story, Favorites, and Fun Facts tabs at the bottom of the screen.'
  提示: ''
  翻译: ''
- 内容: 'You can change all of the data, or content, in the app to be about any topic of your choice. While you walk through this sample, try swapping out the information and edit colors and modifiers to suit your style.'
  提示: ''
  翻译: ''
- 内容: 'Tabbed Interface'
  提示: ''
  翻译: ''
- 内容: 'Explore how to set up a tabbed interface.'
  提示: ''
  翻译: ''
- 内容: 'Step 1'
  提示: ''
  翻译: ''
- 内容: 'This is the ContentView view. It’s the first view that you’ll see when you launch your app.'
  提示: ''
  翻译: ''
- 内容: 'Step 2'
  提示: ''
  翻译: ''
- 内容: 'You create the user interface, or UI, for your app inside the body. The entire contents of your app are in the code below.'
  提示: ''
  翻译: ''
- 内容: 'Step 3'
  提示: ''
  翻译: ''
- 内容: 'TabView is how you create a user interface with tabs. Inside the tab view, you list each of the tab items that you want.'
  提示: ''
  翻译: ''
- 内容: 'Step 4'
  提示: ''
  翻译: ''
- 内容: 'To make a tab, create an instance of the view you want to display when someone taps a tab. The first tab view in the list is HomeView, so it’s the first tab you see when the app launches.'
  提示: ''
  翻译: ''
- 内容: 'Step 5'
  提示: ''
  翻译: ''
- 内容: 'Try commenting out a tab, using two slashes // at the beginning of each of the highlighted lines of code to see what happens to your UI.'
  提示: ''
  翻译: ''
- 内容: 'Step 6'
  提示: ''
  翻译: ''
- 内容: 'Under the view, add the .tabItem modifier, and pass in a Label as the tab display. Without a tabItem, the tab for this view appears empty.'
  提示: ''
  翻译: ''
- 内容: 'Step 7'
  提示: ''
  翻译: ''
- 内容: 'The tabItem modifier only accepts Label, Text, and Image views. Including any other type of view, such as Button, results in an empty tab item.'
  提示: ''
  翻译: ''
- 内容: 'Your Data'
  提示: ''
  翻译: ''
- 内容: 'Modify your app data.'
  提示: ''
  翻译: ''
- 内容: 'This file is where your app stores all of its data (information). In SwiftUI, it’s best to keep the data separate from the visual components of your app. While learning SwiftUI, you’ll frequently see the concept of having a “source of truth” for your data, which means that you only define a value in one place. You will practice this in a few steps when you begin to change the data.'
  提示: ''
  翻译: ''
- 内容: 'This structure provides the blueprint for your data. It contains properties that define the name and type of data that the app stores. For instance, your app stores a story property as a String and a colors property as an array of Color values.'
  提示: ''
  翻译: ''
- 内容: 'This value, information, uses the Info structure to store all of the data used in your app. You can refer to this global variable by its name from any file of the project.'
  提示: ''
  翻译: ''
- 内容: 'To personalize this project, change the string inside the quotes to your name.'
  提示: ''
  翻译: ''
- 内容: 'The value for your name is only created this one time, making it the source of truth. Whenever you want to use your name in a component or view, you refer to this value by its name: information.name.'
  提示: ''
  翻译: ''
- 内容: 'Before moving on, try changing the image. The string “Placeholder” refers to the name of an image in your app’s assets. To add a new image, open the sidebar and tap the Add New Item button in the toolbar. Choose Photo, and select an image from your Photos library. Then give your image a descriptive name.'
  提示: ''
  翻译: ''
- 内容: 'To use your new image, change “Placeholder” to the name of the new image you just added. Tap the the Home tab in the Preview to see your changes.'
  提示: ''
  翻译: ''
- 内容: 'Step 8'
  提示: ''
  翻译: ''
- 内容: 'Swift Playgrounds adds your photo to the Assets section of the sidebar and highlights the name for you to edit. After you’ve named the image asset, change the string for this property to match its new name.'
  提示: ''
  翻译: ''
- 内容: 'Home Tab'
  提示: ''
  翻译: ''
- 内容: 'Explore some basic SwiftUI code.'
  提示: ''
  翻译: ''
- 内容: 'The HomeView is the first tab of your app, so it’s the first thing you’ll see when the app launches. You’ve seen this in action already, when you first opened the project.'
  提示: ''
  翻译: ''
- 内容: 'A VStack organizes its contents vertically from top to bottom on the screen.'
  提示: ''
  翻译: ''
- 内容: 'A Text view displays the string inside the quotation marks.'
  提示: ''
  翻译: ''
- 内容: 'Try changing the string before moving on. Do you see your new text in the preview?'
  提示: ''
  翻译: ''
- 内容: 'You can use modifiers to change how the app displays the text. Here are two good ones to know: You can use .font to specify different styles of text, and .fontWeight to change the weight of the font.'
  提示: ''
  翻译: ''
- 内容: 'Try changing .largeTitle and .bold to different values to see how they affect the view. To do this, delete the existing value — including the period (.) — then type a period and wait to see the options suggested in the autocompletion menu.'
  提示: ''
  翻译: ''
- 内容: 'The .padding modifier adds extra space between a view and the other views around it.'
  提示: ''
  翻译: ''
- 内容: 'Here, you’re using the default SwiftUI padding. You can also specify a custom value, which you can spot below.'
  提示: ''
  翻译: ''
- 内容: 'Step 9'
  提示: ''
  翻译: ''
- 内容: 'This Image view displays the image that you changed in the Data file.'
  提示: ''
  翻译: ''
- 内容: 'Step 10'
  提示: ''
  翻译: ''
- 内容: 'This Image view has several common modifiers. The first one, .resizable, is very important to remember.'
  提示: ''
  翻译: ''
- 内容: 'Step 11'
  提示: ''
  翻译: ''
- 内容: 'It allows the image to adapt to the available space on the screen; otherwise the image appears at its full size, which may be very large.'
  提示: ''
  翻译: ''
- 内容: 'Step 12'
  提示: ''
  翻译: ''
- 内容: 'The .aspectRatio modifier requires the image to maintain its aspect ratio. By specifying .fit, you’re asking SwiftUI to resize the image so it fits within the available space.'
  提示: ''
  翻译: ''
- 内容: 'Step 13'
  提示: ''
  翻译: ''
- 内容: 'To see the effect of this modifier, try changing .fit to .fill, or comment out the line entirely.'
  提示: ''
  翻译: ''
- 内容: 'Step 14'
  提示: ''
  翻译: ''
- 内容: 'You can give any view rounded corners with the .cornerRadius modifier. Try changing the value to make the corners larger or smaller.'
  提示: ''
  翻译: ''
- 内容: 'Story Tab'
  提示: ''
  翻译: ''
- 内容: 'Learn how to use a scroll view to create a scrolling narrative.'
  提示: ''
  翻译: ''
- 内容: 'This is the StoryView, where you can display a story about anything you want.'
  提示: ''
  翻译: ''
- 内容: 'To let your story scroll if the text gets too long, wrap your Text view in a ScrollView.'
  提示: ''
  翻译: ''
- 内容: 'This text view extracts information that you have in the Data file to build your story.'
  提示: ''
  翻译: ''
- 内容: 'To test the scroll view, open Data and edit the story text between the red quotation marks. Try writing a long story of your own, then come back to this preview and test how your page scrolls.'
  提示: ''
  翻译: ''
- 内容: 'Favorites Tab'
  提示: ''
  翻译: ''
- 内容: 'Build your UI using various stacks and loops.'
  提示: ''
  翻译: ''
- 内容: 'The FavoritesView shows your favorite hobbies, foods, and colors.'
  提示: ''
  翻译: ''
- 内容: 'Each of the three sections are organized the same way. You have a title at the top, and an HStack below it that displays the images, text, or colors horizontally.'
  提示: ''
  翻译: ''
- 内容: 'The ForEach uses the global information data and iterates through the hobbies array. Because ForEach needs to know how to tell the items apart from each other, you pass \.self as the argument to id.'
  提示: ''
  翻译: ''
- 内容: 'In the hobbies example, you create an image inside the HStack using modifiers to adjust its size. For example, .resizable allows you to resize the images.'
  提示: ''
  翻译: ''
- 内容: 'Try replacing the .frame modifier with .scaledToFit or .scaledToFill, or removing the .resizable modifier. Did anything happen to your images?'
  提示: ''
  翻译: ''
- 内容: 'Fun Facts Tab'
  提示: ''
  翻译: ''
- 内容: 'Make your app interactive by adding a button that displays a random fact about you.'
  提示: ''
  翻译: ''
- 内容: 'In the FunFactsView you’ll use a Button view to change a fun fact string whenever someone taps it.'
  提示: ''
  翻译: ''
- 内容: 'The variable funFact stores the fun fact displayed by this view. Because funFact uses @State, the fun fact Text view automatically updates with a new value whenever its value changes.'
  提示: ''
  翻译: ''
- 内容: 'When you tap this button, the code assigns funFact a new value, which then changes the string in the Text view above.'
  提示: ''
  翻译: ''
- 内容: 'To edit the look of the button, try adding some modifiers. Add space around the button using .padding(), a background color using .background(Color.cyan), or rounded corners using .cornerRadius(15). Add these below the brace of the button’s closure.'
  提示: ''
  翻译: ''
- 内容: 'This Text view shows the fun fact. It uses the variable funFact as its argument so it can show a new fun fact whenever the value changes.'
  提示: ''
  翻译: ''
- 内容: 'Choose Your Own Story'
  提示: ''
  翻译: ''
- 内容: 'Provide dynamic navigation between views.'
  提示: ''
  翻译: ''
