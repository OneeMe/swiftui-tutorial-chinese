# TODO
- 内容: 'Recognizing Gestures'
  提示: ''
  翻译: ''
- 内容: 'Update shapes or other content in response to taps, rotations, or other Multi-Touch gestures.'
  提示: ''
  翻译: ''
- 内容: 'Welcome to Recognizing Gestures. In this sample you’ll learn how to add different gestures to your views, like taps, drags, and touch and hold.'
  提示: ''
  翻译: ''
- 内容: 'Start by trying out each gesture in the app preview. When you’re ready, dive into the code walkthrough and learn how to add a gesture to your next project.'
  提示: ''
  翻译: ''
- 内容: 'Tap'
  提示: ''
  翻译: ''
- 内容: 'Explore how to apply different colors to a rectangle when tapped.'
  提示: ''
  翻译: ''
- 内容: 'Step 1'
  提示: ''
  翻译: ''
- 内容: 'In SwiftUI, you can add a gesture directly to a view using a .gesture modifier. Here, you’ll explore how to add a tap gesture to a rectangle view so that it changes color when pressed.'
  提示: ''
  翻译: ''
- 内容: 'Step 2'
  提示: ''
  翻译: ''
- 内容: 'To set up this tap gesture, you need a @State value, color. When you mark the property with @State, SwiftUI updates all views that use this value any time it changes.'
  提示: ''
  翻译: ''
- 内容: 'Step 3'
  提示: ''
  翻译: ''
- 内容: 'The color value is set as the foreground color of the rectangle. Whenever this value changes, the color of the rectangle updates.'
  提示: ''
  翻译: ''
- 内容: 'Step 4'
  提示: ''
  翻译: ''
- 内容: 'This code defines a custom gesture, tapGesture. After you’ve defined a custom gesture, you can attach it to a view using the .gesture modifier.'
  提示: ''
  翻译: ''
- 内容: 'Step 5'
  提示: ''
  翻译: ''
- 内容: 'Your custom gesture uses a TapGesture and defines the event handler for when the tap ends. When the tap ends, you assign a random value to color, and the rectangle automatically updates to reflect the new value.'
  提示: ''
  翻译: ''
- 内容: 'Step 6'
  提示: ''
  翻译: ''
- 内容: 'By passing tapGesture into the .gesture modifier, the rectangle responds to taps using your custom gesture definition.'
  提示: ''
  翻译: ''
- 内容: 'Long Press'
  提示: ''
  翻译: ''
- 内容: 'Touch and hold to change the shape of a capsule.'
  提示: ''
  翻译: ''
- 内容: 'In the LongPressView, you’ll change the height and width of a capsule shape every time you touch and hold on the shape.'
  提示: ''
  翻译: ''
- 内容: 'To change the capsule’s size, you’ll iterate through an array of size values. Changes to the @State property sizeIndex updates the capsule to a new size in the array.'
  提示: ''
  翻译: ''
- 内容: 'Experiment'
  提示: ''
  翻译: ''
- 内容: 'Try adding a few sizes of your own. Can you make a really big or really tiny capsule?'
  提示: ''
  翻译: ''
- 内容: 'The capsule shape uses the sizes value in the frame modifier to set its width and height based on the sizeIndex. If the index changes, this view automatically updates to reflect the new size it references in the array.'
  提示: ''
  翻译: ''
- 内容: 'What happens if you set the width’s index to 1 with sizes[1].width? What happens each time you touch and hold on the capsule? Try it before moving on.'
  提示: ''
  翻译: ''
- 内容: 'Here you define your custom gesture using a LongPressGesture.'
  提示: ''
  翻译: ''
- 内容: 'When the long press gesture ends, iterate to the next index in the array. The value increments by 1 until it reaches the last index (sizes.count) before resetting back to 0.'
  提示: ''
  翻译: ''
- 内容: 'The last step is to apply the long press gesture to the capsule shape using the .gesture modifier. The app calls event handlers from longPressGesture when you touch and hold the capsule.'
  提示: ''
  翻译: ''
- 内容: 'Drag'
  提示: ''
  翻译: ''
- 内容: 'Learn how to use a drag gesture to move a circle around the screen.'
  提示: ''
  翻译: ''
- 内容: 'In DragView you’ll use a drag gesture to move a circle shape around the view.'
  提示: ''
  翻译: ''
- 内容: 'To keep track of the circle’s position, the @State variable offset stores a CGSize value. This doesn’t refer to the circle’s size, but is instead used as a distance vector to represent its offset from its starting position in the view.'
  提示: ''
  翻译: ''
- 内容: 'Here you pass in offset as the value for the circle view’s .offset modifier. Any change to this value causes SwiftUI to update the position of the circle relative to its original location in the view. As your gesture updates offset, the circle moves around the view.'
  提示: ''
  翻译: ''
- 内容: 'Here you define a custom gesture using a DragGesture.'
  提示: ''
  翻译: ''
- 内容: 'The system calls the .onChanged event handler any time the position of your drag changes. Each time the handler is called, it assigns a new value to offset using the translation property of the drag value.'
  提示: ''
  翻译: ''
- 内容: 'Try modifying this formula to see what happens to your circle when you drag it. What happens when you remove the -50 (the radius of the circle) from the width and height? What happens if you remove the start location of the width and height?'
  提示: ''
  翻译: ''
- 内容: 'To apply the drag gesture to the circle, pass in the dragGesture to the .gesture modifier of the circle.'
  提示: ''
  翻译: ''
- 内容: 'Rotate'
  提示: ''
  翻译: ''
- 内容: 'Experiment rotating a square using two fingers.'
  提示: ''
  翻译: ''
- 内容: 'In RotateView you’ll use a two-finger rotation gesture to rotate a square shape.'
  提示: ''
  翻译: ''
- 内容: 'To set up the rotation gesture, you need a starting angle, rotation. This state property enables you to track the change of rotation, and redraws the view every time it changes.'
  提示: ''
  翻译: ''
- 内容: 'You pass in rotation as the value for the .rotationEffect modifier, enabling the view to update the rotation angle as the value changes.'
  提示: ''
  翻译: ''
- 内容: 'Here you define a custom gesture using a RotationGesture.'
  提示: ''
  翻译: ''
- 内容: 'While you rotate the square, the rotation property constantly updates the value of the @State property, rotation. SwiftUI then detects those changes and tells the square to redraw itself.'
  提示: ''
  翻译: ''
- 内容: 'To capture the gesture’s final value, use the onEnded event handler. This updates rotation with the last value from the gesture and draws the square view to perfectly match the angle of your last movement.'
  提示: ''
  翻译: ''
- 内容: 'Note'
  提示: ''
  翻译: ''
- 内容: 'You could remove this whole section of code, and you might not notice any difference when you rotate the square. However, if you record the exact angles, you might notice a small difference between the final angle of your finger movements and the final angle of the square after it stops rotating.'
  提示: ''
  翻译: ''
- 内容: 'Step 7'
  提示: ''
  翻译: ''
- 内容: 'The last step required to make this square rotate is to add the .gesture modifier to the square, passing in rotationGesture so it responds to your touch.'
  提示: ''
  翻译: ''
- 内容: 'The rotation gesture is only available on Multi-Touch devices (Magic Mouse, Magic Trackpad, MacBook, or iOS devices), and may not be available in some macOS configurations. For more details, see Using Multi-Touch gestures on your Mac.'
  提示: ''
  翻译: ''
- 内容: 'Line Drawing'
  提示: ''
  翻译: ''
- 内容: 'Explore how to draw lines onscreen using a drag gesture.'
  提示: ''
  翻译: ''
- 内容: 'In SingleLine, you’ll use a drag gesture to draw a line in the view. To do this, you’ll create a Path and redraw it every time you initiate a drag event.'
  提示: ''
  翻译: ''
- 内容: 'This drag gesture needs two state properties: one to track the start of the line, and one to track the end of the line.'
  提示: ''
  翻译: ''
- 内容: 'To draw a line, you’ll use a Path, which creates an outline of a shape. First, you’ll move the path to the lineStart value and then you’ll add a line to the lineEnd value. Because each of these values are @State properties, any changes to their data causes SwiftUI to redraw the path and update the view. As a result, you can see the line updating as you drag around the view.'
  提示: ''
  翻译: ''
- 内容: 'This drag gesture example uses a DragGesture, just like the other drag gesture example. However, here you need two event handlers: one that’s called as the drag value changes in .onChanged, and the other that’s called when the drag gesture ends in .onEnded.'
  提示: ''
  翻译: ''
- 内容: 'When your device detects a drag gesture, lineStart uses the initial location of the drag, and this value remains constant. However, lineEnd updates with a new location for each .onChanged event sent. This allows the line to redraw, making it look like you’re dragging the end of the line wherever you want it to go.'
  提示: ''
  翻译: ''
- 内容: 'The second event handler, .onEnded, captures the last location of your drag and updates the lineEnd property, ensuring your line ends where your touch left the view. After the .onEnded handler recognizes that you’ve stopped drawing, the line stays in place until you start a new drag gesture.'
  提示: ''
  翻译: ''
- 内容: 'To assign the gesture, pass in lineDrawingGesture to the .gesture modifier of your Path.'
  提示: ''
  翻译: ''
- 内容: 'Animating Shapes'
  提示: ''
  翻译: ''
- 内容: 'Learn how to use shapes and simple animations in SwiftUI.'
  提示: ''
  翻译: ''
