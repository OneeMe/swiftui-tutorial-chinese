- 内容: 'Date Planner'
  提示: ''
  翻译: ''
- 内容: 'Present hierarchical information in a list.'
  提示: ''
  翻译: ''
- 内容: 'Welcome to the Date Planner app. Use this app to organize and plan a series of events, organized by date.'
  提示: ''
  翻译: ''
- 内容: 'This walkthrough teaches you how to use lists and an observable data model to create dynamic lists of events and tasks. Time to jump in.'
  提示: ''
  翻译: ''
- 内容: 'App Configuration'
  提示: ''
  翻译: ''
- 内容: 'Learn how the app shares data with its views by creating a single data object and making it available to the entire view hierachy.'
  提示: ''
  翻译: ''
- 内容: 'Step 1'
  提示: ''
  翻译: ''
- 内容: 'To navigate between different views in your app, create a NavigationView as the top-level view in your view hierarchy, inserting the app’s home view. For this app, EventList is that home view and the first view the app displays when it launches.'
  提示: ''
  翻译: ''
- 内容: 'Step 2'
  提示: ''
  翻译: ''
- 内容: 'In wider app configurations, such full-screen landscape on an iPad, SwiftUI displays the NavigationView content as multiple adjacent columns, rather than a single stack. In this layout, your EventList displays in a sidebar column, and its destination content appears in the primary pane.'
  提示: ''
  翻译: ''
- 内容: 'Step 3'
  提示: ''
  翻译: ''
- 内容: 'Adding a Text view is a useful way to give the second column a placeholder view until a person selects an event in the list. When a person selects an event, the app replaces the placeholder view with an EventDetail view.'
  提示: ''
  翻译: ''
- 内容: 'Step 4'
  提示: ''
  翻译: ''
- 内容: 'The app stores its data using the variable eventData. It’s defined with the @StateObject property wrapper to create an instance of an observable object, EventData. Because this object is observable, SwiftUI watches it to keep track of any changes to its values. Whenever the data changes, SwiftUI automatically updates all of the views that use (or observe) it.'
  提示: ''
  翻译: ''
- 内容: 'Step 5'
  提示: ''
  翻译: ''
- 内容: 'To make eventData available to your entire view hierarchy, use the .environmentObject modifier and pass in the eventData instance. Now you can use this data across all of your navigation view’s child views (and their child views as well).'
  提示: ''
  翻译: ''
- 内容: 'Event Model'
  提示: ''
  翻译: ''
- 内容: 'Your event model holds all of the data needed to visualize and organize events in your list. Here you’ll explore how to structure an Event.'
  提示: ''
  翻译: ''
- 内容: 'To organize its data, Event planner uses a collection of Event objects, each of which represent a specific event, such as a camping trip or birthday party. By conforming to the Identifiable protocol, you ensure that when you create a list of events, SwiftUI can identify and update each row.'
  提示: ''
  翻译: ''
- 内容: 'The Event type contains all of the information you need to populate an event, including a symbol, color, title, date, and collection of tasks. Each task is a specific to-do item for the event, such as “Get a camping lantern“.'
  提示: ''
  翻译: ''
- 内容: 'You’ll also notice a list of computed properties for Event. These help people organize the sections of their lists based on the date and the number of tasks to complete.'
  提示: ''
  翻译: ''
- 内容: 'For instance, the isPast property checks to see if the date property is less than Date.now, which is the current date and time. The property returns true when the event date is in the past, which allows people to sort any past events into their own category.'
  提示: ''
  翻译: ''
- 内容: 'Take a moment to examine some of the other properties defined here. Can you figure out how they might help organize the list of events?'
  提示: ''
  翻译: ''
- 内容: 'Event Task'
  提示: ''
  翻译: ''
- 内容: 'An event task represents a to-do item for an event. Here, you’ll learn how how to model the tasks.'
  提示: ''
  翻译: ''
- 内容: 'An EventTask represents one of a collection of to-do items for an event. Like Event, an EventTask is also Identifiable, which lets SwiftUI manage and update its appearance in a list.'
  提示: ''
  翻译: ''
- 内容: 'EventTask contains properties for text, completion state, and an isNew property. When a person marks a task as completed, you set isCompleted to true, which allows your app to track the remaining tasks for each event.'
  提示: ''
  翻译: ''
- 内容: 'Event Data'
  提示: ''
  翻译: ''
- 内容: 'You use the EventData observable object to populate the data in your event list. Here you’ll learn how to structure and update the data.'
  提示: ''
  翻译: ''
- 内容: 'This is the EventData type, which stores and modifies all of the events that your app displays in its UI. EventData conforms to the ObservableObject protocol, which means that if any of its published values change, SwiftUI notifies all observers (views using those values) and updates those views automatically.'
  提示: ''
  翻译: ''
- 内容: 'EventData contains a property called events that stores a prepopulated array of Event values, such as game night or a doctor’s appointment. By using the @Published property wrapper when defining this property, you instruct SwiftUI to notify all observers and update their views whenever the events array changes. This allows you to add and delete events from the array and see the change instantly in your UI.'
  提示: ''
  翻译: ''
- 内容: 'EventData provides methods for adding and deleting events. In addition, sortedEvents(period:) returns an array of sorted events based on the requested time period. Use this method in EventList to create sections based upon the event’s date, such as Next 7 Days.'
  提示: ''
  翻译: ''
- 内容: 'The Period enumeration provides each of the time categories that you’ll use to sort the list. The categories are nextSevenDays, nextThirtyDays, future, and past.'
  提示: ''
  翻译: ''
- 内容: 'Event List'
  提示: ''
  翻译: ''
- 内容: 'Learn how to construct the primary UI for the app, the event list, using a List view.'
  提示: ''
  翻译: ''
- 内容: 'The EventList view creates a grouped listing of events using a List view.'
  提示: ''
  翻译: ''
- 内容: 'In DatePlannerApp, the top-level navigation view uses the .environmentObject modifier to pass in an instance of EventData, making it accessible to all of its child views. You can now access that data in this child view by declaring a variable with the @EnvironmentObject property wrapper and giving it the EventData type. You now have access to all of the prepopulated event data to create your list.'
  提示: ''
  翻译: ''
- 内容: 'To make your list, create a List view and use a ForEach loop to iterate over all of the time periods (nextSevenDays, nextThirtyDays, future, and past).'
  提示: ''
  翻译: ''
- 内容: 'Next, check that the current time period contains at least one event, otherwise, don’t show any data for it.'
  提示: ''
  翻译: ''
- 内容: 'When you know there are events in a section, create a Section view and use ForEach to iterate over all events in that time period. Use the method sortedEvents(period:) from EventData to return the events specific to the section’s time range.'
  提示: ''
  翻译: ''
- 内容: 'Step 6'
  提示: ''
  翻译: ''
- 内容: 'Inside the ForEach, create the EventRow views for each event in the time period. To do this, use a NavigationLink, then add an EventRow as the label (the part that you see), and an EventEditor as the destination (the part you navigate to when tapped). The event editor is where you’ll see all the tasks for each event and edit the event details.'
  提示: ''
  翻译: ''
- 内容: 'Step 7'
  提示: ''
  翻译: ''
- 内容: 'To delete events, add the modifier .swipeActions on the event row and define a button that calls the delete method from EventData. You can now swipe on an event and tap the delete button to remove the current event.'
  提示: ''
  翻译: ''
- 内容: 'Organizing with Grids'
  提示: ''
  翻译: ''
- 内容: 'Display visual content in an arrangement of rows and columns.'
  提示: ''
  翻译: ''
