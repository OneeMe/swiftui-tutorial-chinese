- 内容: 'Trimming and exporting media in visionOS'
  提示: ''
  翻译: ''
- 内容: 'Display standard controls in your app to edit the timeline of the currently playing media.'
  提示: ''
  翻译: ''
- 内容: 'Overview'
  提示: ''
  翻译: ''
- 内容: 'You use AVPlayerViewController to present the system video-player interface in your visionOS app. In addition to its primary role, AVPlayerViewController can also provide a media-trimming experience similar to the interface of QuickTime Player in macOS, like that below.'
  提示: ''
  翻译: ''
- 内容: 'When you enable this feature, people can specify a segment of the media timeline for display. This article describes how to adopt this feature in your app, and shows how to use AVFoundation to export the trimmed result.'
  提示: ''
  翻译: ''
- 内容: 'Determine whether the media supports trimming'
  提示: ''
  翻译: ''
- 内容: 'Apps typically provide a user-interface element to put the player view controller into trimming mode. Because the player doesn’t support trimming certain media, such as HTTP Live Streaming or protected content, apps observe the state of the canBeginTrimming property to update the enabled state of their user interface accordingly. For example, the following code observes the state of the canBeginTrimming property and updates the state of a published property, which sets the appropriate enabled state in the UI:'
  提示: ''
  翻译: ''
- 内容: 'Enable the trimming user interface'
  提示: ''
  翻译: ''
- 内容: 'After you determine that the player view controller supports editing the current media’s timeline, call the player’s beginTrimming(completionHandler:) method to enable its trimming interface. Call this method from an asynchronous context:'
  提示: ''
  翻译: ''
- 内容: 'This method returns a Boolean value that indicates whether the user pinched the Done button or the Cancel button. Pinching the Done button causes the view controller to update the values of the player item’s reversePlaybackEndTime and forwardPlaybackEndTime properties to match the trimmed selection.'
  提示: ''
  翻译: ''
- 内容: 'Export the trimmed media selection'
  提示: ''
  翻译: ''
- 内容: 'A convenient way to export your trimmed selection is to use AVAssetExportSession. This object provides a simple preset-based approach to transcode media in various formats. Create an instance of an export session by passing it the player item’s asset and an export preset. Additionally, configure its output URL and file type:'
  提示: ''
  翻译: ''
- 内容: 'To export only the portion of the asset that matches your trimmed selection, create a CMTimeRange based on the reverse and forward playback end times of the current player item:'
  提示: ''
  翻译: ''
- 内容: 'Finally, begin the export operation to begin asynchronously transcoding the media to the output URL:'
  提示: ''
  翻译: ''
