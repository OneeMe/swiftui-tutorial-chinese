- 内容: 'Play, pause, and seek through a media presentation.'
  提示: ''
  翻译: ''
- 内容: 'Overviewin page link'
  提示: ''
  翻译: ''
- 内容: 'AVFoundation provides comprehensive support for playing media assets, including local and remote file-based media and also media streamed with HTTP Live Streaming. The framework models its media assets using the AVAsset class, which provides a consistent interface to load and inspect your media, regardless of its type or location. Use an AVPlayer object to play media assets in the form of AVPlayerItem objects, which model the dynamic state of an asset such as its currentTime().'
  提示: ''
  翻译: ''
- 内容: 'Understanding how to effectively use AVPlayer is essential for anyone building a custom player UI or otherwise requiring programmatic control of playback.'
  提示: ''
  翻译: ''
- 内容: 'Observe playback readinessin page link'
  提示: ''
  翻译: ''
- 内容: 'When you create a player item, it starts with a status of AVPlayerItem.Status.unknown, which means the system hasn’t attempted to load its media for playback. Only when you associate the item with an AVPlayer object does the system begin loading an asset’s media.'
  提示: ''
  翻译: ''
- 内容: 'To know when the player item is ready for playback, observe the value of its status property. Add this observation before you call the player’s replaceCurrentItem(with:) method, because associating the player item with a player is the system’s cue to load the item’s media:'
  提示: ''
  翻译: ''
- 内容: 'When the player item reaches a AVPlayerItem.Status.readyToPlay state, present or enable your playback UI. Alternatively, if a failure occurs, show the appropriate status in the player.'
  提示: ''
  翻译: ''
- 内容: 'Control the playback ratein page link'
  提示: ''
  翻译: ''
- 内容: 'A player provides the play() and pause() methods as its primary means of controlling its playback rate. When a player item is ready for playback, call the player’s play() method to request that playback begins at the defaultRate, which has an initial value of 1.0 (the natural rate). By default, a player automatically waits to start playback until it has sufficient media data available to minimize stalling. You can determine whether a player is in a paused, waiting to play, or playing state by observing its timeControlStatus value:'
  提示: ''
  翻译: ''
- 内容: 'Observe changes to the rate property by observing notifications of type rateDidChangeNotification. Observing this notification is similar to key-value observing the rate property, but provides additional information about the reason for the rate change. Retrieve the reason from the notification’s userInfo dictionary using the rateDidChangeReasonKey constant:'
  提示: ''
  翻译: ''
- 内容: 'Seek through the media timelinein page link'
  提示: ''
  翻译: ''
- 内容: 'You can seek through a media timeline in several ways using the methods of AVPlayer and AVPlayerItem. The most common way is to use the player’s seek(to:) method, passing it a destination CMTime value. Call this method in an asynchronous context:'
  提示: ''
  翻译: ''
- 内容: 'You can call this method a single time to seek to the location, but you can also call it continuously such as when you use a Slider view.'
  提示: ''
  翻译: ''
- 内容: 'The seek(to:) method is a convenient way to quickly seek through your presentation, but it’s tuned for speed rather than precision. This means the actual time to which the player seeks may differ slightly from the time you request. If you need to implement precise seeking behavior, use the seek(to:toleranceBefore:toleranceAfter:) method, which lets you indicate the tolerated amount of deviation from your target time (before and after). For example, if you need to provide sample-accurate seeking behavior, specify tolerance values of zero:'
  提示: ''
  翻译: ''
- 内容: ''
  提示: ''
  翻译: ''
- 内容: 'See Alsoin page link'
  提示: ''
  翻译: ''
- 内容: 'Playback controlin page link'
  提示: ''
  翻译: ''
