- 内容: 'Presenting windows and spaces'
  提示: ''
  翻译: ''
- 内容: 'Open and close the scenes that make up your app’s interface.'
  提示: ''
  翻译: ''
- 内容: 'Overviewin page link'
  提示: ''
  翻译: ''
- 内容: 'An app’s scenes, which contain views that people interact with, can take different forms. For example, a scene can fill a window, a tab in a window, or an entire screen. Some scenes can even place views throughout a person’s surroundings. How a scene appears depends on its type, the platform, and the context.'
  提示: ''
  翻译: ''
- 内容: 'When someone launches your app, SwiftUI looks for the first WindowGroup, Window, or DocumentGroup in your app declaration and opens a scene of that type, typically filling a new window or the entire screen, depending on the platform. For example, the following app running in macOS presents a window that contains a MailViewer view:'
  提示: ''
  翻译: ''
- 内容: 'In visionOS, you can alternatively configure your app to open the first ImmersiveSpace that the app declares. In any case, specific platforms and configurations enable you to open more than one scene at a time. Under those conditions, you can use actions that appear in the environment to programmatically open and close the scenes in your app.'
  提示: ''
  翻译: ''
- 内容: 'Check for multiple-scene supportin page link'
  提示: ''
  翻译: ''
- 内容: 'If you share code among different platforms and need to find out at runtime whether the current system supports displaying multiple scenes, read the supportsMultipleWindows environment value. The following code creates a button that’s hidden unless the app supports multiple windows:'
  提示: ''
  翻译: ''
- 内容: 'The value that you read depends on both the platform and how you configure your app:'
  提示: ''
  翻译: ''
- 内容: 'In macOS, this property returns true for any app that uses the SwiftUI app lifecycle.'
  提示: ''
  翻译: ''
- 内容: 'In iPadOS and visionOS, this property returns true for any app that uses the SwiftUI app lifecycle and has the Information Property List key UIApplicationSupportsMultipleScenes set to true, and false otherwise.'
  提示: ''
  翻译: ''
- 内容: 'For all other platforms and configurations, the value returns false.'
  提示: ''
  翻译: ''
- 内容: 'If your app only ever runs in one of these situations, you can assume the associated behavior and don’t need to check the value.'
  提示: ''
  翻译: ''
- 内容: 'Enable multiple simultaneous scenesin page link'
  提示: ''
  翻译: ''
- 内容: 'You can always present multiple scenes in macOS. To enable an iPadOS or visionOS app to simultaneously display multiple scenes — including ImmersiveSpace scenes in visionOS — add the UIApplicationSupportsMultipleScenes key with a value of true in the UIApplicationSceneManifest dictionary of your app’s Information Property List. Use the Info tab in Xcode for your app’s target to add this key:'
  提示: ''
  翻译: ''
- 内容: ''
  提示: ''
  翻译: ''
- 内容: 'Apps on other platforms can display only one scene during their lifetime.'
  提示: ''
  翻译: ''
- 内容: 'Open windows programmaticallyin page link'
  提示: ''
  翻译: ''
- 内容: 'Some platforms provide built-in controls that enable people to open instances of the window-style scenes that your app defines. For example, in macOS people can choose File > New Window from the menu bar to open a new window. SwiftUI also provides ways for you to open new windows programmatically.'
  提示: ''
  翻译: ''
- 内容: 'To do this, get the openWindow action from the environment and call it with an identifier, a value, or both to indicate what kind of window to open and optionally what data to open it with. The following view opens a new instance of the previously defined mail viewer window when someone clicks or taps the button:'
  提示: ''
  翻译: ''
- 内容: 'When the action runs on a system that supports multiple scenes, SwiftUI looks for a window in the app declaration that has a matching identifier and creates a new scene of that type.'
  提示: ''
  翻译: ''
- 内容: 'Important'
  提示: ''
  翻译: ''
- 内容: 'If supportsMultipleWindows is false and you try to open a new window, SwiftUI ignores the action and logs a runtime error.'
  提示: ''
  翻译: ''
- 内容: 'In addition to opening more instances of an app’s main window, as in the above example, you can also open other window types that your app’s body declares. For example, you can open an instance of the Window that displays connectivity information:'
  提示: ''
  翻译: ''
- 内容: 'Open a space programmaticallyin page link'
  提示: ''
  翻译: ''
- 内容: 'In visionOS, you open an immersive space — a scene that you can use to present unbounded content in a person’s surroundings — in much the same way that you open a window, except that you use the openImmersiveSpace action. The action runs asynchronously, so you use the await keyword when you call it, and typically do so from inside a Task:'
  提示: ''
  翻译: ''
- 内容: 'Because your app operates in a Full Space when you open an ImmersiveSpace scene, you can only open one scene of this type at a time. If you try to open a space when one is already open, the system logs a runtime error.'
  提示: ''
  翻译: ''
- 内容: 'Your app can display any number of windows together with an immersive space. However, when you open a space from your app, the system hides all windows that belong to other apps. After you dismiss your space, the other apps’ windows reappear. Similarly, the system hides your app’s windows if another app opens an immersive space.'
  提示: ''
  翻译: ''
- 内容: 'Designate a space as your app’s main interfacein page link'
  提示: ''
  翻译: ''
- 内容: 'When visionOS launches an app, it opens the first window group, window, or document scene that the app’s body declares, just like on other platforms. This is true even if you first declare a space. However, if you want to open your app into an immersive space directly, specify a space as the default scene for your app by adding the UIApplicationPreferredDefaultSceneSessionRole key to your app’s information property list and setting its value to UISceneSessionRoleImmersiveSpaceApplication. In that case, visionOS opens the first space that it finds in your app declaration.'
  提示: ''
  翻译: ''
- 内容: 'Important'
  提示: ''
  翻译: ''
- 内容: 'Be careful not to overwhelm people when starting your app with an immersive space. For design guidance, see Immersive experiences.'
  提示: ''
  翻译: ''
- 内容: 'Close windows programmaticallyin page link'
  提示: ''
  翻译: ''
- 内容: 'People can close windows using system controls, like the close button built into the frame around a macOS window. You can also close windows programmatically. Get the dismissWindow action from the environment, and call it using the identifier of the window that you want to dismiss:'
  提示: ''
  翻译: ''
- 内容: 'Close spaces programmaticallyin page link'
  提示: ''
  翻译: ''
- 内容: 'To close a space, call the dismissImmersiveSpace action. Like the corresponding open space action, the close action operates asynchronously and requires the await keyword:'
  提示: ''
  翻译: ''
- 内容: 'You don’t need to specify an identifier for this action, because there can only ever be one space open at a time.'
  提示: ''
  翻译: ''
- 内容: 'See Alsoin page link'
  提示: ''
  翻译: ''
- 内容: 'SwiftUIin page link'
  提示: ''
  翻译: ''
